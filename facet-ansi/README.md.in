Think owo-colors, but even lighter, and unconditional. And not comprehensive.

## Overview

`facet-ansi` is a lightweight library for adding ANSI colors and styles to terminal output. It provides a simple, ergonomic API without any conditional compilation or unnecessary complexity.

## Examples

### Basic Styling

```rust
use facet_ansi::Stylize;

# fn main() {
println!("{}", "This text is red".red());
println!("{}", "This text is blue".blue());
println!("{}", "This text is green".green());

// Combine with formatting
println!("{} and {}", "Red text".red(), "blue text".blue());
# }
```

### Style Methods

```rust
use facet_ansi::Stylize;

# fn main() {
// Apply emphasis styles
println!("{}", "Bold text".bold());
println!("{}", "Underlined text".underline());
println!("{}", "Dimmed text".dimmed());

// Combine styles with method chaining
println!("{}", "Bold and red".red().style(facet_ansi::Style::new().bold()));
# }
```

### Using the Style Module

```rust
use facet_ansi::{Stylize, ColorStyle, styles};

# fn main() {
// Use pre-defined styles
let warning_style = styles::yellow();
let error_style = styles::bright_red().bold();

println!("{}", "Warning message".style(warning_style));
println!("{}", "Error message".style(error_style));

// Create custom styles
let custom_style = facet_ansi::Style::new().fg_green().bold().underline();
println!("{}", "Custom styled text".style(custom_style));
# }
```

### Debug Output

```rust
use facet_ansi::Stylize;

# fn main() {
// Works with debug formatting too
let data = vec![1, 2, 3];
println!("{:?}", data.cyan());
# }
```
