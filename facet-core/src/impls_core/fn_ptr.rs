//! GENERATED: DO NOT EDIT — this file is generated by the `facet-dev` crate.
//! Run `just gen` to regenerate.

use core::{alloc::Layout, fmt};

use crate::{
    ConstTypeId, Def, Facet, FunctionAbi, FunctionPointerDef, Shape, TypeNameOpts, TypeParam,
    value_vtable,
};

#[inline(always)]
pub fn write_type_name_list(
    f: &mut fmt::Formatter<'_>,
    opts: TypeNameOpts,
    abi: FunctionAbi,
    params: &'static [&'static Shape],
    ret_type: &'static Shape,
) -> fmt::Result {
    if abi != FunctionAbi::Rust {
        f.pad("extern \"")?;
        if let Some(abi) = abi.as_abi_str() {
            f.pad(abi)?;
        }
        f.pad("\" ")?;
    }
    f.pad("fn")?;
    f.pad("(")?;
    if let Some(opts) = opts.for_children() {
        for (index, shape) in params.iter().enumerate() {
            if index > 0 {
                f.pad(", ")?;
            }
            shape.write_type_name(f, opts)?;
        }
    } else {
        write!(f, "⋯")?;
    }
    f.pad(") -> ")?;
    ret_type.write_type_name(f, opts)?;
    Ok(())
}

unsafe impl<R> Facet for fn() -> R
where
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R>(f: &mut fmt::Formatter, opts: TypeNameOpts) -> fmt::Result
        where
            R: Facet,
        {
            write_type_name_list(f, opts, FunctionAbi::Rust, &[], R::SHAPE)
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R>))
            .type_params(&[])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(&const { [] })
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::Rust)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0> Facet for fn(T0) -> R
where
    T0: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0>(f: &mut fmt::Formatter, opts: TypeNameOpts) -> fmt::Result
        where
            T0: Facet,
            R: Facet,
        {
            write_type_name_list(f, opts, FunctionAbi::Rust, &[T0::SHAPE], R::SHAPE)
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0>))
            .type_params(&[TypeParam {
                name: "T0",
                shape: || T0::SHAPE,
            }])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(&const { [|| T0::SHAPE] })
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::Rust)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0, T1> Facet for fn(T0, T1) -> R
where
    T0: Facet,
    T1: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0, T1>(f: &mut fmt::Formatter, opts: TypeNameOpts) -> fmt::Result
        where
            T0: Facet,
            T1: Facet,
            R: Facet,
        {
            write_type_name_list(
                f,
                opts,
                FunctionAbi::Rust,
                &[T0::SHAPE, T1::SHAPE],
                R::SHAPE,
            )
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0, T1>))
            .type_params(&[
                TypeParam {
                    name: "T0",
                    shape: || T0::SHAPE,
                },
                TypeParam {
                    name: "T1",
                    shape: || T1::SHAPE,
                },
            ])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(&const { [|| T0::SHAPE, || T1::SHAPE] })
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::Rust)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0, T1, T2> Facet for fn(T0, T1, T2) -> R
where
    T0: Facet,
    T1: Facet,
    T2: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0, T1, T2>(f: &mut fmt::Formatter, opts: TypeNameOpts) -> fmt::Result
        where
            T0: Facet,
            T1: Facet,
            T2: Facet,
            R: Facet,
        {
            write_type_name_list(
                f,
                opts,
                FunctionAbi::Rust,
                &[T0::SHAPE, T1::SHAPE, T2::SHAPE],
                R::SHAPE,
            )
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0, T1, T2>))
            .type_params(&[
                TypeParam {
                    name: "T0",
                    shape: || T0::SHAPE,
                },
                TypeParam {
                    name: "T1",
                    shape: || T1::SHAPE,
                },
                TypeParam {
                    name: "T2",
                    shape: || T2::SHAPE,
                },
            ])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(&const { [|| T0::SHAPE, || T1::SHAPE, || T2::SHAPE] })
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::Rust)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0, T1, T2, T3> Facet for fn(T0, T1, T2, T3) -> R
where
    T0: Facet,
    T1: Facet,
    T2: Facet,
    T3: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0, T1, T2, T3>(f: &mut fmt::Formatter, opts: TypeNameOpts) -> fmt::Result
        where
            T0: Facet,
            T1: Facet,
            T2: Facet,
            T3: Facet,
            R: Facet,
        {
            write_type_name_list(
                f,
                opts,
                FunctionAbi::Rust,
                &[T0::SHAPE, T1::SHAPE, T2::SHAPE, T3::SHAPE],
                R::SHAPE,
            )
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0, T1, T2, T3>))
            .type_params(&[
                TypeParam {
                    name: "T0",
                    shape: || T0::SHAPE,
                },
                TypeParam {
                    name: "T1",
                    shape: || T1::SHAPE,
                },
                TypeParam {
                    name: "T2",
                    shape: || T2::SHAPE,
                },
                TypeParam {
                    name: "T3",
                    shape: || T3::SHAPE,
                },
            ])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(
                        &const { [|| T0::SHAPE, || T1::SHAPE, || T2::SHAPE, || T3::SHAPE] },
                    )
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::Rust)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0, T1, T2, T3, T4> Facet for fn(T0, T1, T2, T3, T4) -> R
where
    T0: Facet,
    T1: Facet,
    T2: Facet,
    T3: Facet,
    T4: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0, T1, T2, T3, T4>(
            f: &mut fmt::Formatter,
            opts: TypeNameOpts,
        ) -> fmt::Result
        where
            T0: Facet,
            T1: Facet,
            T2: Facet,
            T3: Facet,
            T4: Facet,
            R: Facet,
        {
            write_type_name_list(
                f,
                opts,
                FunctionAbi::Rust,
                &[T0::SHAPE, T1::SHAPE, T2::SHAPE, T3::SHAPE, T4::SHAPE],
                R::SHAPE,
            )
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0, T1, T2, T3, T4>))
            .type_params(&[
                TypeParam {
                    name: "T0",
                    shape: || T0::SHAPE,
                },
                TypeParam {
                    name: "T1",
                    shape: || T1::SHAPE,
                },
                TypeParam {
                    name: "T2",
                    shape: || T2::SHAPE,
                },
                TypeParam {
                    name: "T3",
                    shape: || T3::SHAPE,
                },
                TypeParam {
                    name: "T4",
                    shape: || T4::SHAPE,
                },
            ])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(
                        &const {
                            [
                                || T0::SHAPE,
                                || T1::SHAPE,
                                || T2::SHAPE,
                                || T3::SHAPE,
                                || T4::SHAPE,
                            ]
                        },
                    )
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::Rust)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0, T1, T2, T3, T4, T5> Facet for fn(T0, T1, T2, T3, T4, T5) -> R
where
    T0: Facet,
    T1: Facet,
    T2: Facet,
    T3: Facet,
    T4: Facet,
    T5: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0, T1, T2, T3, T4, T5>(
            f: &mut fmt::Formatter,
            opts: TypeNameOpts,
        ) -> fmt::Result
        where
            T0: Facet,
            T1: Facet,
            T2: Facet,
            T3: Facet,
            T4: Facet,
            T5: Facet,
            R: Facet,
        {
            write_type_name_list(
                f,
                opts,
                FunctionAbi::Rust,
                &[
                    T0::SHAPE,
                    T1::SHAPE,
                    T2::SHAPE,
                    T3::SHAPE,
                    T4::SHAPE,
                    T5::SHAPE,
                ],
                R::SHAPE,
            )
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0, T1, T2, T3, T4, T5>))
            .type_params(&[
                TypeParam {
                    name: "T0",
                    shape: || T0::SHAPE,
                },
                TypeParam {
                    name: "T1",
                    shape: || T1::SHAPE,
                },
                TypeParam {
                    name: "T2",
                    shape: || T2::SHAPE,
                },
                TypeParam {
                    name: "T3",
                    shape: || T3::SHAPE,
                },
                TypeParam {
                    name: "T4",
                    shape: || T4::SHAPE,
                },
                TypeParam {
                    name: "T5",
                    shape: || T5::SHAPE,
                },
            ])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(
                        &const {
                            [
                                || T0::SHAPE,
                                || T1::SHAPE,
                                || T2::SHAPE,
                                || T3::SHAPE,
                                || T4::SHAPE,
                                || T5::SHAPE,
                            ]
                        },
                    )
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::Rust)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R> Facet for extern "C" fn() -> R
where
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R>(f: &mut fmt::Formatter, opts: TypeNameOpts) -> fmt::Result
        where
            R: Facet,
        {
            write_type_name_list(f, opts, FunctionAbi::C, &[], R::SHAPE)
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R>))
            .type_params(&[])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(&const { [] })
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::C)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0> Facet for extern "C" fn(T0) -> R
where
    T0: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0>(f: &mut fmt::Formatter, opts: TypeNameOpts) -> fmt::Result
        where
            T0: Facet,
            R: Facet,
        {
            write_type_name_list(f, opts, FunctionAbi::C, &[T0::SHAPE], R::SHAPE)
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0>))
            .type_params(&[TypeParam {
                name: "T0",
                shape: || T0::SHAPE,
            }])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(&const { [|| T0::SHAPE] })
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::C)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0, T1> Facet for extern "C" fn(T0, T1) -> R
where
    T0: Facet,
    T1: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0, T1>(f: &mut fmt::Formatter, opts: TypeNameOpts) -> fmt::Result
        where
            T0: Facet,
            T1: Facet,
            R: Facet,
        {
            write_type_name_list(f, opts, FunctionAbi::C, &[T0::SHAPE, T1::SHAPE], R::SHAPE)
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0, T1>))
            .type_params(&[
                TypeParam {
                    name: "T0",
                    shape: || T0::SHAPE,
                },
                TypeParam {
                    name: "T1",
                    shape: || T1::SHAPE,
                },
            ])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(&const { [|| T0::SHAPE, || T1::SHAPE] })
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::C)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0, T1, T2> Facet for extern "C" fn(T0, T1, T2) -> R
where
    T0: Facet,
    T1: Facet,
    T2: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0, T1, T2>(f: &mut fmt::Formatter, opts: TypeNameOpts) -> fmt::Result
        where
            T0: Facet,
            T1: Facet,
            T2: Facet,
            R: Facet,
        {
            write_type_name_list(
                f,
                opts,
                FunctionAbi::C,
                &[T0::SHAPE, T1::SHAPE, T2::SHAPE],
                R::SHAPE,
            )
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0, T1, T2>))
            .type_params(&[
                TypeParam {
                    name: "T0",
                    shape: || T0::SHAPE,
                },
                TypeParam {
                    name: "T1",
                    shape: || T1::SHAPE,
                },
                TypeParam {
                    name: "T2",
                    shape: || T2::SHAPE,
                },
            ])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(&const { [|| T0::SHAPE, || T1::SHAPE, || T2::SHAPE] })
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::C)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0, T1, T2, T3> Facet for extern "C" fn(T0, T1, T2, T3) -> R
where
    T0: Facet,
    T1: Facet,
    T2: Facet,
    T3: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0, T1, T2, T3>(f: &mut fmt::Formatter, opts: TypeNameOpts) -> fmt::Result
        where
            T0: Facet,
            T1: Facet,
            T2: Facet,
            T3: Facet,
            R: Facet,
        {
            write_type_name_list(
                f,
                opts,
                FunctionAbi::C,
                &[T0::SHAPE, T1::SHAPE, T2::SHAPE, T3::SHAPE],
                R::SHAPE,
            )
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0, T1, T2, T3>))
            .type_params(&[
                TypeParam {
                    name: "T0",
                    shape: || T0::SHAPE,
                },
                TypeParam {
                    name: "T1",
                    shape: || T1::SHAPE,
                },
                TypeParam {
                    name: "T2",
                    shape: || T2::SHAPE,
                },
                TypeParam {
                    name: "T3",
                    shape: || T3::SHAPE,
                },
            ])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(
                        &const { [|| T0::SHAPE, || T1::SHAPE, || T2::SHAPE, || T3::SHAPE] },
                    )
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::C)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0, T1, T2, T3, T4> Facet for extern "C" fn(T0, T1, T2, T3, T4) -> R
where
    T0: Facet,
    T1: Facet,
    T2: Facet,
    T3: Facet,
    T4: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0, T1, T2, T3, T4>(
            f: &mut fmt::Formatter,
            opts: TypeNameOpts,
        ) -> fmt::Result
        where
            T0: Facet,
            T1: Facet,
            T2: Facet,
            T3: Facet,
            T4: Facet,
            R: Facet,
        {
            write_type_name_list(
                f,
                opts,
                FunctionAbi::C,
                &[T0::SHAPE, T1::SHAPE, T2::SHAPE, T3::SHAPE, T4::SHAPE],
                R::SHAPE,
            )
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0, T1, T2, T3, T4>))
            .type_params(&[
                TypeParam {
                    name: "T0",
                    shape: || T0::SHAPE,
                },
                TypeParam {
                    name: "T1",
                    shape: || T1::SHAPE,
                },
                TypeParam {
                    name: "T2",
                    shape: || T2::SHAPE,
                },
                TypeParam {
                    name: "T3",
                    shape: || T3::SHAPE,
                },
                TypeParam {
                    name: "T4",
                    shape: || T4::SHAPE,
                },
            ])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(
                        &const {
                            [
                                || T0::SHAPE,
                                || T1::SHAPE,
                                || T2::SHAPE,
                                || T3::SHAPE,
                                || T4::SHAPE,
                            ]
                        },
                    )
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::C)
                    .build()
            }))
            .build()
    };
}
unsafe impl<R, T0, T1, T2, T3, T4, T5> Facet for extern "C" fn(T0, T1, T2, T3, T4, T5) -> R
where
    T0: Facet,
    T1: Facet,
    T2: Facet,
    T3: Facet,
    T4: Facet,
    T5: Facet,
    R: Facet,
{
    const SHAPE: &'static Shape = &const {
        fn type_name<R, T0, T1, T2, T3, T4, T5>(
            f: &mut fmt::Formatter,
            opts: TypeNameOpts,
        ) -> fmt::Result
        where
            T0: Facet,
            T1: Facet,
            T2: Facet,
            T3: Facet,
            T4: Facet,
            T5: Facet,
            R: Facet,
        {
            write_type_name_list(
                f,
                opts,
                FunctionAbi::C,
                &[
                    T0::SHAPE,
                    T1::SHAPE,
                    T2::SHAPE,
                    T3::SHAPE,
                    T4::SHAPE,
                    T5::SHAPE,
                ],
                R::SHAPE,
            )
        }

        Shape::builder()
            .id(ConstTypeId::of::<Self>())
            .layout(Layout::new::<Self>())
            .vtable(value_vtable!(Self, type_name::<R, T0, T1, T2, T3, T4, T5>))
            .type_params(&[
                TypeParam {
                    name: "T0",
                    shape: || T0::SHAPE,
                },
                TypeParam {
                    name: "T1",
                    shape: || T1::SHAPE,
                },
                TypeParam {
                    name: "T2",
                    shape: || T2::SHAPE,
                },
                TypeParam {
                    name: "T3",
                    shape: || T3::SHAPE,
                },
                TypeParam {
                    name: "T4",
                    shape: || T4::SHAPE,
                },
                TypeParam {
                    name: "T5",
                    shape: || T5::SHAPE,
                },
            ])
            .def(Def::FunctionPointer({
                FunctionPointerDef::builder()
                    .parameter_types(
                        &const {
                            [
                                || T0::SHAPE,
                                || T1::SHAPE,
                                || T2::SHAPE,
                                || T3::SHAPE,
                                || T4::SHAPE,
                                || T5::SHAPE,
                            ]
                        },
                    )
                    .return_type(|| R::SHAPE)
                    .abi(FunctionAbi::C)
                    .build()
            }))
            .build()
    };
}
