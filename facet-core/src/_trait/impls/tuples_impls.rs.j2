{# Template for generating Facet implementations for tuples #}

{# Note: this comment applies not to this template file, but to the generated code #}
//! GENERATED: DO NOT EDIT — this file is generated from `tuples_impls.rs.j2`
//! file in the `facet-codegen` crate.
//!
//! Edit the template and run `just codegen` to update.

use core::{alloc::Layout, fmt};

use crate::{
    ConstTypeId, Field, FieldFlags, Def, StructDef,
    StructKind, Shape, Facet, TypeNameOpts, ValueVTable,
    Characteristic, OpaqueConst, MarkerTraits
};

#[inline(always)]
pub fn write_type_name_list(
    f: &mut fmt::Formatter<'_>,
    opts: TypeNameOpts,
    open: &'static str,
    delimiter: &'static str,
    close: &'static str,
    shapes: &'static [&'static Shape],
) -> fmt::Result {
    f.pad(open)?;
    if let Some(opts) = opts.for_children() {
        for (index, shape) in shapes.iter().enumerate() {
            if index > 0 {
                f.pad(delimiter)?;
            }
            shape.write_type_name(f, opts)?;
        }
    } else {
        write!(f, "⋯")?;
    }
    f.pad(close)?;
    Ok(())
}

macro_rules! field {
    ($idx:tt, $ty:ty,) => {
        Field::builder()
            .name(stringify!($idx))
            .shape($crate::shape_of(&|t: $ty| t.$idx))
            .offset(core::mem::offset_of!($ty, $idx))
            .flags(FieldFlags::EMPTY)
            .build()
    };
}

{% for n in range(1, max_tuple_size + 1) %}
    {%- set where_predicates %}{% for i in range(n) %}T{{ i }}: Facet{% if not loop.last %},{% endif %}{% endfor %}{% endset %}
    {%- set type_list %}
        {%- for i in range(n) -%}
        T{{ i }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    {%- endset %}
    {%- set shape_list %}
        {%- for i in range(n) -%}
        T{{ i }}::SHAPE{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    {%- endset -%}
    {%- set shape_slice %}&[{{ shape_list }}]{%- endset -%}
    {%- set type_name %}
        ({%- for i in range(n) %}T{{ i }},{% endfor -%})
    {%- endset -%}
unsafe impl<{{ type_list }}> Facet for {{ type_name }}
where
    {{ where_predicates }}
{
    const SHAPE: &'static Shape = &const {
        fn type_name<{{ type_list }}>(
            f: &mut fmt::Formatter,
            opts: TypeNameOpts,
        ) -> fmt::Result
        where
            {{ where_predicates }}
        {
            write_type_name_list(f, opts, "(", ", ", ")", {{ shape_slice }})
        }

        Shape::builder()
            .id(ConstTypeId::of::<{{ type_name }}>())
            .layout(Layout::new::<{{ type_name }}>())
            .vtable(&const {
                let mut builder = ValueVTable::builder()
                    .type_name(type_name::<{{ type_list }}>)
                    .marker_traits(MarkerTraits::empty());

                if Characteristic::Eq.all({{ shape_slice }}) {
                    builder = builder.debug(|value, f| {
                        let value = unsafe { value.as_ref::<{{ type_name }}>() };
                        write!(f, "(")?;
                        {% for i in range(n) %}{% if i > 0 %}write!(f, ", ")?;
                        {% endif %}unsafe {
                            let ptr = &value.{{ i }} as *const T{{ i }};
                            (T{{ i }}::SHAPE.vtable.debug.unwrap_unchecked())(
                                OpaqueConst::new(ptr),
                                f,
                            )
                        }?;{% endfor %}
                        write!(f, ")")
                    });

                    builder = builder.eq(|a, b| {
                        let a = unsafe { a.as_ref::<{{ type_name }}>() };
                        let b = unsafe { b.as_ref::<{{ type_name }}>() };

                        {% for i in range(n) %}{% if i < n-1 %}// Compare element {{ i }}
                        unsafe {
                            let a_ptr = &a.{{ i }} as *const T{{ i }};
                            let b_ptr = &b.{{ i }} as *const T{{ i }};
                            if !(T{{ i }}::SHAPE.vtable.eq.unwrap_unchecked())(
                                OpaqueConst::new(a_ptr),
                                OpaqueConst::new(b_ptr),
                            ) {
                                return false;
                            }
                        }

                        {% elif i == n-1 %}// Compare last element
                        unsafe {
                            (T{{ i }}::SHAPE.vtable.eq.unwrap_unchecked())(
                                OpaqueConst::new(&a.{{ i }} as *const T{{ i }}),
                                OpaqueConst::new(&b.{{ i }} as *const T{{ i }}),
                            )
                        }{% endif %}{% endfor %}
                    });
                }

                builder.build()
            })
            .def(Def::Struct({
                StructDef::builder()
                    .kind(StructKind::Tuple)
                    .fields(&const { [
                        {% for i in range(n) %}field!({{ i }}, {{ type_name }},){% if not loop.last %},
                        {% endif %}{% endfor %}
                    ] })
                    .build()
            }))
            .build()
    };
}
{% endfor %}
