---
source: facet-derive-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        struct Foo {\n            /// This field has a doc comment\n            bar: u32,\n        }\n        \"#)"
---
#[used]
static FOO_SHAPE: &'static ::facet::Shape = <Foo as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for Foo {
    const SHAPE: &'static ::facet::Shape = &const {
        let fields: &'static [::facet::Field] = &const {
            [::facet::Field::builder()
                .name("bar")
                .shape(|| ::facet::shape_of(&|s: &Foo| &s.bar))
                .offset(::core::mem::offset_of!(Foo, bar))
                .doc(&[" This field has a doc comment"])
                .build()]
        };
        let vtable = &const {
            let mut vtable =
                ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(f, "Foo"));
            vtable
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(vtable)
            .def(::facet::Def::Struct(
                ::facet::StructDef::builder()
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            ))
            .build()
    };
}
