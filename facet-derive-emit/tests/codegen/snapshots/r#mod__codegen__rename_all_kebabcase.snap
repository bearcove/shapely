---
source: facet-derive-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[facet(rename_all = \"kebab-case\")]\n        struct KebabCaseExample {\n            field_one: String,\n            field_two: String,\n        }\n        \"#)"
---
#[used]
static KEBAB_CASE_EXAMPLE_SHAPE: &'static ::facet::Shape =
    <KebabCaseExample as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for KebabCaseExample {
    const SHAPE: &'static ::facet::Shape = &const {
        let fields: &'static [::facet::Field] = &const {
            [
                ::facet::Field::builder()
                    .name("field-one")
                    .shape(|| ::facet::shape_of(&|s: &KebabCaseExample| &s.field_one))
                    .offset(::core::mem::offset_of!(KebabCaseExample, field_one))
                    .flags(::facet::FieldFlags::EMPTY)
                    .attributes(&const { [::facet::FieldAttribute::Rename("field-one")] })
                    .build(),
                ::facet::Field::builder()
                    .name("field-two")
                    .shape(|| ::facet::shape_of(&|s: &KebabCaseExample| &s.field_two))
                    .offset(::core::mem::offset_of!(KebabCaseExample, field_two))
                    .flags(::facet::FieldFlags::EMPTY)
                    .attributes(&const { [::facet::FieldAttribute::Rename("field-two")] })
                    .build(),
            ]
        };
        let vtable = &const {
            let mut vtable = ::facet::value_vtable!(
                Self,
                |f, _opts| ::core::fmt::Write::write_str(f, "KebabCaseExample")
            );
            vtable
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(vtable)
            .def(::facet::Def::Struct(
                ::facet::StructDef::builder()
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            ))
            .attributes(&[::facet::ShapeAttribute::RenameAll("kebab-case")])
            .build()
    };
}
