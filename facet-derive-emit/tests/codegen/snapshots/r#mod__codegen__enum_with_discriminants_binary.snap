---
source: facet-derive-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[repr(u8)]\n        #[derive(Facet)]\n        enum BitFlags {\n          None = 0b0000_0000,\n          Read = 0b0000_0001,\n          Write = 0b0000_0010,\n          Execute = 0b0000_0100,\n          All = 0b0000_0111,\n        }\n        \"#)"
---
#[used]
static BIT_FLAGS_SHAPE: &'static ::facet::Shape = <BitFlags as ::facet::Facet>::SHAPE;
#[automatically_derived]
#[allow(non_camel_case_types)]
unsafe impl<'__facet> ::facet::Facet<'__facet> for BitFlags {
    const VTABLE: &'static ::facet::ValueVTable = &const {
        ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(
            f, "BitFlags"
        ))
    };
    const SHAPE: &'static ::facet::Shape = &const {
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                ::facet::Variant::builder()
                    .name("None")
                    .discriminant(0i64)
                    .data(
                        ::facet::StructType::builder()
                            .repr(::facet::Repr::c())
                            .unit()
                            .build(),
                    )
                    .build(),
                ::facet::Variant::builder()
                    .name("Read")
                    .discriminant(1i64)
                    .data(
                        ::facet::StructType::builder()
                            .repr(::facet::Repr::c())
                            .unit()
                            .build(),
                    )
                    .build(),
                ::facet::Variant::builder()
                    .name("Write")
                    .discriminant(2i64)
                    .data(
                        ::facet::StructType::builder()
                            .repr(::facet::Repr::c())
                            .unit()
                            .build(),
                    )
                    .build(),
                ::facet::Variant::builder()
                    .name("Execute")
                    .discriminant(4i64)
                    .data(
                        ::facet::StructType::builder()
                            .repr(::facet::Repr::c())
                            .unit()
                            .build(),
                    )
                    .build(),
                ::facet::Variant::builder()
                    .name("All")
                    .discriminant(7i64)
                    .data(
                        ::facet::StructType::builder()
                            .repr(::facet::Repr::c())
                            .unit()
                            .build(),
                    )
                    .build(),
            ]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .ty(::facet::Type::User(::facet::UserType::Enum(
                ::facet::EnumType::builder()
                    .variants(__facet_variants)
                    .repr(::facet::Repr::c())
                    .enum_repr(::facet::EnumRepr::U8)
                    .build(),
            )))
            .build()
    };
}
