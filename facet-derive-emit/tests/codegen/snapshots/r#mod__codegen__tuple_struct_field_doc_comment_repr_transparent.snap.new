---
source: facet-derive-emit/tests/codegen/mod.rs
assertion_line: 347
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[repr(transparent)]\n        /// This is a struct for sure\n        struct Blah(\n            /// and this is a field\n            u32,\n        );\n        \"#)"
---
#[used]
static BLAH_SHAPE: &'static ::facet::Shape = <Blah as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for Blah {
    const SHAPE: &'static ::facet::Shape = &const {
        let fields: &'static [::facet::Field] = &const {
            [::facet::Field::builder()
                .name("0")
                .shape(|| ::facet::shape_of(&|s: &Blah| &s.0))
                .offset(::core::mem::offset_of!(Blah, 0))
                .flags(::facet::FieldFlags::EMPTY)
                .attributes(&const { [] })
                .doc(&[" and this is a field"])
                .build()]
        };
        let vtable = &const {
            let mut vtable =
                ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(f, "Blah"));
            unsafe fn try_from<'src, 'dst>(
                src_ptr: ::facet::PtrConst<'src>,
                src_shape: &'static ::facet::Shape,
                dst: ::facet::PtrUninit<'dst>,
            ) -> Result<::facet::PtrMut<'dst>, ::facet::TryFromError> {
                match <u32 as ::facet::Facet>::SHAPE.vtable.try_from {
                    Some(inner_try) => (inner_try)(src_ptr, src_shape, dst),
                    None => {
                        if src_shape != <u32 as ::facet::Facet>::SHAPE {
                            return Err(::facet::TryFromError::UnsupportedSourceShape {
                                src_shape,
                                expected: const { &[&<u32 as ::facet::Facet>::SHAPE] },
                            });
                        }
                        let inner: u32 = src_ptr.read();
                        Ok(dst.put(inner))
                    }
                }
            }
            vtable.try_from = Some(try_from);
            unsafe fn try_into_inner<'src, 'dst>(
                src_ptr: ::facet::PtrConst<'src>,
                dst: ::facet::PtrUninit<'dst>,
            ) -> Result<::facet::PtrMut<'dst>, ::facet::TryIntoInnerError> {
                let wrapper = src_ptr.get::<Blah>();
                Ok(dst.put(wrapper.0.clone()))
            }
            vtable.try_into_inner = Some(try_into_inner);
            unsafe fn try_borrow_inner<'src>(
                src_ptr: ::facet::PtrConst<'src>,
            ) -> Result<::facet::PtrConst<'src>, ::facet::TryBorrowInnerError> {
                let wrapper = src_ptr.get::<Blah>();
                Ok(::facet::PtrConst::new(&wrapper.0 as *const _ as *const u8))
            }
            vtable.try_borrow_inner = Some(try_borrow_inner);
            vtable
        };
        fn inner_shape() -> &'static ::facet::Shape {
            <u32 as ::facet::Facet>::SHAPE
        }
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(vtable)
            .def(::facet::Def::Struct(
                ::facet::StructDef::builder()
                    .kind(::facet::StructKind::TupleStruct)
                    .fields(fields)
                    .build(),
            ))
            .inner(inner_shape)
            .doc(&[" This is a struct for sure"])
            .build()
    };
}
