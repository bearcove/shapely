---
source: facet-derive-emit/tests/codegen.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[repr(C)]\n        enum EnumWithVariants {\n            /// Comment A\n            Variant1,\n            /// Comment B\n            Variant2(i32),\n            Variant3 { field1: i32, field2: String },\n        }\n        \"#)"
snapshot_kind: text
---
#[used]
static ENUM_WITH_VARIANTS_SHAPE: &'static ::facet::Shape =
    <EnumWithVariants as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl ::facet::Facet for EnumWithVariants {
    const SHAPE: &'static ::facet::Shape = &const {
        #[repr(C)]
        enum __ShadowDiscriminantEnumWithVariants {
            Variant1,
            Variant2,
            Variant3,
        }
        #[repr(C)]
        union __ShadowFieldsEnumWithVariants {
            Variant1: std::mem::ManuallyDrop<__ShadowFieldEnumWithVariants_Variant1>,
            Variant2: std::mem::ManuallyDrop<__ShadowFieldEnumWithVariants_Variant2>,
            Variant3: std::mem::ManuallyDrop<__ShadowFieldEnumWithVariants_Variant3>,
        }
        #[repr(C)]
        struct __ShadowReprEnumWithVariants {
            _discriminant: __ShadowDiscriminantEnumWithVariants,
            _fields: __ShadowFieldsEnumWithVariants,
        }
        #[repr(C)]
        struct __ShadowFieldEnumWithVariants_Variant1;
        #[repr(C)]
        struct __ShadowFieldEnumWithVariants_Variant2 {
            _0: i32,
        }
        #[repr(C)]
        struct __ShadowFieldEnumWithVariants_Variant3 {
            field1: i32,
            field2: String,
        }
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                ::facet::Variant::builder()
                    .name("Variant1")
                    .discriminant(0)
                    .fields(::facet::Struct::builder().unit().build())
                    .doc(&[" Comment A"])
                    .build(),
                {
                    let fields: &'static [::facet::Field] = &const {
                        [::facet::Field::builder()
                            .name("_0")
                            .shape(|| {
                                ::facet::shape_of(&|s: &__ShadowFieldEnumWithVariants_Variant2| {
                                    &s._0
                                })
                            })
                            .offset(
                                ::core::mem::offset_of!(__ShadowFieldEnumWithVariants_Variant2, _0)
                                    + ::core::mem::offset_of!(
                                        __ShadowReprEnumWithVariants,
                                        _fields
                                    ),
                            )
                            .flags(::facet::FieldFlags::EMPTY)
                            .attributes(&const { [] })
                            .build()]
                    };
                    ::facet::Variant::builder()
                        .name("Variant2")
                        .discriminant(1)
                        .fields(::facet::Struct::builder().tuple().fields(fields).build())
                        .doc(&[" Comment B"])
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [
                            ::facet::Field::builder()
                                .name("field1")
                                .shape(|| {
                                    ::facet::shape_of(
                                        &|s: &__ShadowFieldEnumWithVariants_Variant3| &s.field1,
                                    )
                                })
                                .offset(
                                    ::core::mem::offset_of!(
                                        __ShadowFieldEnumWithVariants_Variant3,
                                        field1
                                    ) + ::core::mem::offset_of!(
                                        __ShadowReprEnumWithVariants,
                                        _fields
                                    ),
                                )
                                .flags(::facet::FieldFlags::EMPTY)
                                .attributes(&const { [] })
                                .build(),
                            ::facet::Field::builder()
                                .name("field2")
                                .shape(|| {
                                    ::facet::shape_of(
                                        &|s: &__ShadowFieldEnumWithVariants_Variant3| &s.field2,
                                    )
                                })
                                .offset(
                                    ::core::mem::offset_of!(
                                        __ShadowFieldEnumWithVariants_Variant3,
                                        field2
                                    ) + ::core::mem::offset_of!(
                                        __ShadowReprEnumWithVariants,
                                        _fields
                                    ),
                                )
                                .flags(::facet::FieldFlags::EMPTY)
                                .attributes(&const { [] })
                                .build(),
                        ]
                    };
                    ::facet::Variant::builder()
                        .name("Variant3")
                        .discriminant(2)
                        .fields(::facet::Struct::builder().struct_().fields(fields).build())
                        .build()
                },
            ]
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(::facet::value_vtable!(Self, |f, _opts| {
                ::core::fmt::Write::write_str(f, "EnumWithVariants")
            }))
            .def(::facet::Def::Enum(
                ::facet::EnumDef::builder()
                    .variants(__facet_variants)
                    .repr(::facet::EnumRepr::from_discriminant_size::<
                        __ShadowDiscriminantEnumWithVariants,
                    >())
                    .build(),
            ))
            .build()
    };
}
