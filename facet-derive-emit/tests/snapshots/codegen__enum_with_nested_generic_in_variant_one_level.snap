---
source: facet-derive-emit/tests/codegen.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[repr(u8)]\n        enum OneLevelNested<T> {\n            VariantA(Result<T, String>),\n            VariantB(Option<T>),\n            // Also include a unit variant to check un-nested\n            Plain,\n        }\n        \"#)"
---
#[automatically_derived]
unsafe impl<T> ::facet::Facet for OneLevelNested<T>
where
    T: ::facet::Facet,
{
    const SHAPE: &'static ::facet::Shape = &const {
        #[repr(C)]
        struct __ShadowOneLevelNested_VariantA<T>
        where
            T: ::facet::Facet,
        {
            _discriminant: u8,
            _0: Result<T, String>,
        }
        #[repr(C)]
        struct __ShadowOneLevelNested_VariantB<T>
        where
            T: ::facet::Facet,
        {
            _discriminant: u8,
            _0: Option<T>,
        }
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(::facet::value_vtable!(Self, |f, _opts| {
                ::core::fmt::Write::write_str(f, "OneLevelNested")
            }))
            .def(::facet::Def::Enum(
                ::facet::EnumDef::builder()
                    .variants(
                        &const {
                            [
                                {
                                    let fields: &'static [::facet::Field] = &const {
                                        [::facet::Field::builder()
                                            .name("_0")
                                            .shape(|| {
                                                ::facet::shape_of(
                                                    &|s: &__ShadowOneLevelNested_VariantA<T>| &s._0,
                                                )
                                            })
                                            .offset(::core::mem::offset_of!(
                                                __ShadowOneLevelNested_VariantA<T>,
                                                _0
                                            ))
                                            .flags(::facet::FieldFlags::EMPTY)
                                            .attributes(&[])
                                            .build()]
                                    };
                                    ::facet::Variant::builder()
                                        .name("VariantA")
                                        .discriminant(0)
                                        .offset(0)
                                        .fields(
                                            ::facet::Struct::builder()
                                                .tuple()
                                                .fields(fields)
                                                .build(),
                                        )
                                        .build()
                                },
                                {
                                    let fields: &'static [::facet::Field] = &const {
                                        [::facet::Field::builder()
                                            .name("_0")
                                            .shape(|| {
                                                ::facet::shape_of(
                                                    &|s: &__ShadowOneLevelNested_VariantB<T>| &s._0,
                                                )
                                            })
                                            .offset(::core::mem::offset_of!(
                                                __ShadowOneLevelNested_VariantB<T>,
                                                _0
                                            ))
                                            .flags(::facet::FieldFlags::EMPTY)
                                            .attributes(&[])
                                            .build()]
                                    };
                                    ::facet::Variant::builder()
                                        .name("VariantB")
                                        .discriminant(1)
                                        .offset(0)
                                        .fields(
                                            ::facet::Struct::builder()
                                                .tuple()
                                                .fields(fields)
                                                .build(),
                                        )
                                        .build()
                                },
                                ::facet::Variant::builder()
                                    .name("Plain")
                                    .discriminant(2)
                                    .offset(0)
                                    .fields(::facet::Struct::builder().unit().build())
                                    .build(),
                            ]
                        },
                    )
                    .repr(::facet::EnumRepr::U8)
                    .build(),
            ))
            .build()
    };
}
