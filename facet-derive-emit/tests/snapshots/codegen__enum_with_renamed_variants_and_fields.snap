---
source: facet-derive-emit/tests/codegen.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[repr(u8)]\n        enum ApiResponse {\n            #[facet(rename = \"Success\")]\n            Ok {\n                #[facet(rename = \"responseData\")]\n                data: String,\n            },\n            #[facet(rename = \"Error\")]\n            Err {\n                #[facet(rename = \"errorCode\")]\n                code: u32,\n                #[facet(rename = \"errorMessage\")]\n                message: String,\n            },\n        }\n        \"#)"
snapshot_kind: text
---
#[used]
static API_RESPONSE_SHAPE: &'static ::facet::Shape = <ApiResponse as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl ::facet::Facet for ApiResponse {
    const SHAPE: &'static ::facet::Shape = &const {
        #[repr(C)]
        struct __ShadowApiResponse_Ok {
            _discriminant: u8,
            data: String,
        }
        #[repr(C)]
        struct __ShadowApiResponse_Err {
            _discriminant: u8,
            code: u32,
            message: String,
        }
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                {
                    let fields: &'static [::facet::Field] = &const {
                        [::facet::Field::builder()
                            .name("data")
                            .shape(|| ::facet::shape_of(&|s: &__ShadowApiResponse_Ok| &s.data))
                            .offset(::core::mem::offset_of!(__ShadowApiResponse_Ok, data))
                            .flags(::facet::FieldFlags::EMPTY)
                            .attributes(&[::facet::FieldAttribute::Rename("responseData")])
                            .build()]
                    };
                    ::facet::Variant::builder()
                        .name("Ok")
                        .discriminant(0)
                        .fields(::facet::Struct::builder().struct_().fields(fields).build())
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [
                            ::facet::Field::builder()
                                .name("code")
                                .shape(|| ::facet::shape_of(&|s: &__ShadowApiResponse_Err| &s.code))
                                .offset(::core::mem::offset_of!(__ShadowApiResponse_Err, code))
                                .flags(::facet::FieldFlags::EMPTY)
                                .attributes(&[::facet::FieldAttribute::Rename("errorCode")])
                                .build(),
                            ::facet::Field::builder()
                                .name("message")
                                .shape(|| {
                                    ::facet::shape_of(&|s: &__ShadowApiResponse_Err| &s.message)
                                })
                                .offset(::core::mem::offset_of!(__ShadowApiResponse_Err, message))
                                .flags(::facet::FieldFlags::EMPTY)
                                .attributes(&[::facet::FieldAttribute::Rename("errorMessage")])
                                .build(),
                        ]
                    };
                    ::facet::Variant::builder()
                        .name("Err")
                        .discriminant(1)
                        .fields(::facet::Struct::builder().struct_().fields(fields).build())
                        .build()
                },
            ]
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(::facet::value_vtable!(Self, |f, _opts| {
                ::core::fmt::Write::write_str(f, "ApiResponse")
            }))
            .def(::facet::Def::Enum(
                ::facet::EnumDef::builder()
                    .variants(__facet_variants)
                    .repr(::facet::EnumRepr::U8)
                    .build(),
            ))
            .build()
    };
}
