---
source: facet-derive-emit/tests/codegen.rs
expression: "expand(r#\"\n        struct Foo<K, V> where K: Eq + Hash {\n            inner: HashMap<K, V>,\n        }\n        \"#)"
---
#[automatically_derived]
unsafe impl<K, V> ::facet::Facet for Foo<K, V>
where
    K: Eq + Hash,
    K: ::facet::Facet,
    V: ::facet::Facet,
{
    const SHAPE: &'static ::facet::Shape = &const {
        let fields: &'static [::facet::Field] = &const {
            [::facet::Field::builder()
                .name("inner")
                .shape(|| ::facet::shape_of(&|s: &Foo<K, V>| &s.inner))
                .offset(:: core :: mem :: offset_of ! (Foo < K , V >, inner))
                .flags(::facet::FieldFlags::EMPTY)
                .attributes(&[])
                .build()]
        };
        let vtable = &const {
            let mut vtable =
                ::facet::value_vtable_inner!(Self, |f, _opts| ::core::fmt::Write::write_str(
                    f, "Foo"
                ));
            vtable
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .vtable(vtable)
            .def(::facet::Def::Struct(
                ::facet::Struct::builder()
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            ))
            .build()
    };
}
