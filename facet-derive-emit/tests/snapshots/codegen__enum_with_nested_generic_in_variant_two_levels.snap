---
source: facet-derive-emit/tests/codegen.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[repr(u8)]\n        enum DeeplyNested<T> {\n            LevelOne(\n                Option<\n                    Result<\n                        Vec<T>,\n                        String\n                    >\n                >\n            ),\n            // Another variant to prove non-nested still works.\n            Simple(T),\n        }\n        \"#)"
snapshot_kind: text
---
#[automatically_derived]
unsafe impl<T> ::facet::Facet for DeeplyNested<T>
where
    T: ::facet::Facet,
{
    const SHAPE: &'static ::facet::Shape = &const {
        #[repr(C)]
        struct __ShadowDeeplyNested_LevelOne<T>
        where
            T: ::facet::Facet,
        {
            _discriminant: u8,
            _0: Option<Result<Vec<T>, String>>,
        }
        #[repr(C)]
        struct __ShadowDeeplyNested_Simple<T>
        where
            T: ::facet::Facet,
        {
            _discriminant: u8,
            _0: T,
        }
        let __facet_variants: &'static [::facet::Variant] = &const {
            [
                {
                    let fields: &'static [::facet::Field] = &const {
                        [::facet::Field::builder()
                            .name("_0")
                            .shape(|| {
                                ::facet::shape_of(&|s: &__ShadowDeeplyNested_LevelOne<T>| &s._0)
                            })
                            .offset(::core::mem::offset_of!(
                                __ShadowDeeplyNested_LevelOne<T>,
                                _0
                            ))
                            .flags(::facet::FieldFlags::EMPTY)
                            .attributes(&[])
                            .build()]
                    };
                    ::facet::Variant::builder()
                        .name("LevelOne")
                        .discriminant(0)
                        .fields(::facet::Struct::builder().tuple().fields(fields).build())
                        .build()
                },
                {
                    let fields: &'static [::facet::Field] = &const {
                        [::facet::Field::builder()
                            .name("_0")
                            .shape(|| {
                                ::facet::shape_of(&|s: &__ShadowDeeplyNested_Simple<T>| &s._0)
                            })
                            .offset(::core::mem::offset_of!(__ShadowDeeplyNested_Simple<T>, _0))
                            .flags(::facet::FieldFlags::EMPTY)
                            .attributes(&[])
                            .build()]
                    };
                    ::facet::Variant::builder()
                        .name("Simple")
                        .discriminant(1)
                        .fields(::facet::Struct::builder().tuple().fields(fields).build())
                        .build()
                },
            ]
        };
        ::facet::Shape::builder()
            .id(::facet::ConstTypeId::of::<Self>())
            .layout(::core::alloc::Layout::new::<Self>())
            .type_params(&[::facet::TypeParam {
                name: "T",
                shape: || <T as ::facet::Facet>::SHAPE,
            }])
            .vtable(::facet::value_vtable!(Self, |f, _opts| {
                ::core::fmt::Write::write_str(f, "DeeplyNested")
            }))
            .def(::facet::Def::Enum(
                ::facet::EnumDef::builder()
                    .variants(__facet_variants)
                    .repr(::facet::EnumRepr::U8)
                    .build(),
            ))
            .build()
    };
}
